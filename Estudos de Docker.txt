--------------------------------------------------------------------------------
Docker:

 O Docker é uma plataforma que permite criar, empacotar e executar aplicações em contêineres.

 Ele é responsável por armazenar vários serviços de forma isolada do SO host, como: web server, banco de dados, aplicação, memcached etc.

 Um contêiner é como uma caixinha leve e isolada que carrega tudo que uma aplicação precisa para rodar (código, bibliotecas, dependências, etc.).

 Ele garante que a aplicação funcione da mesma forma em qualquer lugar: no seu computador, no servidor da empresa ou na nuvem.

 Vantagens principais:

    Portabilidade: roda em qualquer sistema que tenha Docker.
    Leveza: contêineres são mais rápidos e consomem menos recursos que máquinas virtuais.
    Isolamento: cada contêiner funciona de forma independente.

 O Docker desenvolveu seu próprio motor de execução, chamado libcontainer (hoje conhecido como runc).

 O runc é o runtime de containers padrão usado pelo Docker (e outras ferramentas compatíveis com o padrão OCI — Open Container Initiative).

 Ele é responsável por criar e executar containers no nível do sistema operacional, diretamente usando os recursos do kernel Linux (namespaces, cgroups, etc).

 Como o runc funciona (passo a passo):

    1- Recebe a especificação do container: O runc espera um pacote de container com:

        Um sistema de arquivos root (rootfs) preparado

        Um arquivo config.json que define como o container deve ser executado

        Esse config.json segue o formato da OCI Runtime Specification.

    2- Aplica namespaces do Linux: Os namespaces isolam o container do resto do sistema. Quando um container é criado, um conjunto de namespaces também é criado automaticamente. O resultado? O container acha que está rodando sozinho no sistema. Cada container tem seu ambiente isolado e não enxerga nem interfere no host.

        pid: processos do container

        net: rede separada

        mnt: pontos de montagem

        ipc: comunicação entre processos

        uts: nome do host (hostname)

        user: usuários (UID/GID)

        cgroup (paralelo): Limita os recursos do container (CPU, RAM etc.)

    3- Aplica cgroups: Os cgroups (control groups) limitam os recursos que o container pode usar e permite que o Docker compartilhe recursos de hardware existentes no host com os containers, definindo limites e restrições. Isso garante que o container não afete o host nem outros containers.

        CPU

        Memória

        I/O

        Processos


    4- Executa o processo definido: Depois que o ambiente isolado está preparado, o runc executa o processo definido (geralmente /bin/sh, nginx, node, etc).

Esse processo se torna o processo PID 1 dentro do container.

--------------------------------------------------------------------------------
Instalação:

 Instale o Docker com as informações contidas no site:

    https://www.docker.com/get-started/
    https://docs.docker.com/desktop/

 Para testar se o Docker está funcionando, execute os comandos:

    sudo docker version

        Client: Docker Engine - Community
        Version:           28.0.4
        API version:       1.48
        Go version:        go1.23.7
        Git commit:        b8034c0
        Built:             Tue Mar 25 15:07:22 2025
        OS/Arch:           linux/amd64
        Context:           default

        Server: Docker Engine - Community
        ...

    sudo docker run hello-world

        Hello from Docker!
        This message shows that your installation appears to be working correctly.

        To generate this message, Docker took the following steps:
        1. The Docker client contacted the Docker daemon.
        2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
            (amd64)
        3. The Docker daemon created a new container from that image which runs the
            executable that produces the output you are currently reading.
        4. The Docker daemon streamed that output to the Docker client, which sent it
            to your terminal.

        To try ...

--------------------------------------------------------------------------------
Imagem:

 Uma imagem Docker é como um molde ou modelo pronto que contém tudo o que você precisa para executar uma aplicação:

    Código da aplicação;
    Bibliotecas necessárias;
    Dependências do sistema;
    Variáveis de ambiente; e
    Comandos de inicialização.

 Ela é imutável. Você pode pensar nela como o “ISO” de um sistema, só que mais leve e feito para rodar rapidamente em containers.

 Exemplo: Uma imagem do nginx já vem com o servidor web instalado e configurado para começar a rodar logo que o container for iniciado.

 Dockerfile:

    Um Dockerfile é um arquivo de texto simples usado para criar imagens Docker personalizadas de forma automatizada e reprodutível.

    Ele contém uma sequência de instruções (comandos) que dizem ao Docker como construir a imagem, passo a passo.

    Exemplo:

        FROM node:latest

        LABEL author=Pitter

        ENV NODE_ENV=production

        ENV PORT=3000

        COPY . /var/www

        WORKDIR /var/www

        RUN npm install

        ENTRYPOINT ["npm", "start"]

        EXPOSE $PORT

    Principais instruções que aparecem em um Dockerfile:

        FROM	    Define a imagem base
        RUN	        Executa comandos durante a construção da imagem
        COPY	    Copia arquivos do host para dentro da imagem
        CMD	        Define o comando padrão quando o container rodar
        EXPOSE	    Documenta a porta que o container usará
        WORKDIR	    Define o diretório de trabalho
        ENV	        Define variáveis de ambiente

    Como usar um Dockerfile criado:

        Crie o arquivo chamado Dockerfile;

        No mesmo diretório, rode:

            docker build -f nome-dockerfile -t nome-da-imagem .   # O '.' no final ainda indica o contexto de build, ou seja, a pasta que será usada como base para copiar arquivos com COPY, ADD, etc.

        Depois, você pode rodar containers com:

            docker run -it nome-da-imagem

 Comandos para gerenciar imagens:

    Baixar uma imagem do Docker Hub (ou outro registry): 

        docker pull ubuntu                  # Imagens oficiais

        docker pull usuario/custom-app      # Imagens comunitárias

    Criar uma imagem a partir de um Dockerfile:

        docker build -t minha_imagem .   # O . no final ainda indica o contexto de build, ou seja, a pasta que será usada como base para copiar arquivos com COPY, ADD, etc.

    Listar todas as imagens disponíveis localmente:

        docker images

    Remover uma imagem:

        docker rmi [nome ou ID da imagem]

    Remover todas as imagens que não estão sendo usadas por nenhum container, de uma vez só.

        docker image prune

    Mostrar as camadas de uma imagem:

        docker history [nome ou ID da imagem]

    Criar uma tag (apelido) para uma imagem:

        docker tag nginx meu-registro/nginx:prod

 Docker Hub:

    O Docker Hub é o repositório oficial de imagens Docker. Ele funciona como um "GitHub das imagens Docker", com imagens oficiais e comunitárias:

        Imagens oficiais (ex: mysql, python, redis): revisadas e mantidas com padrões elevados de segurança e confiabilidade.

        Imagens comunitárias (ex: usuario/custom-app): úteis, mas é bom revisar o conteúdo e a confiabilidade.

    Baixar uma imagem do Docker Hub (ou outro registry): 

        docker pull ubuntu                  # Imagens oficiais

        docker pull usuario/custom-app      # Imagens comunitárias

    Enviar uma imagem para um repositório remoto (Docker Hub ou outro):

        docker push meu-registro/nginx:prod

    Autenticar em um repositório remoto (Docker Hub ou outro):

        docker login   # Com sua conta já criada, siga os passos apresentados no terminal

    Enviar uma imagem para um repositório remoto (Docker Hub ou outro):

        docker push [usuário/nome da imagem]

--------------------------------------------------------------------------------
Container:

 Um container Docker é uma instância viva e em execução de uma imagem. É uma camada fina de read/write em cima das imagens. É como se você pegasse a imagem (molde) e executasse uma cópia funcional dela.

 O container:

    Roda isolado do host (mas pode se comunicar com ele);

    É leve e inicia rápido;

    Pode ser parado, reiniciado, ou descartado facilmente; e

    Pode ter dados persistentes, se configurado com volumes.

 Se a imagem é a receita do bolo, o container é o bolo assando no forno.

 Você pode ter vários containers rodando a partir da mesma imagem.

 Exemplo:

    docker run -d nginx
    docker run -d nginx

    Duas instâncias do servidor nginx rodando, ambas baseadas na mesma imagem nginx.

 Os containers Docker podem assumir diferentes estados ao longo de seu ciclo de vida:

    running: O container está em execução. Seu processo principal (PID 1) está ativo. Aparece com status “Up” no docker ps.

    paused: O container está temporariamente suspenso. Todos os processos dentro dele são congelados. Pode ser retomado com docker unpause.

    stopped / exited: O container foi encerrado, voluntária ou involuntariamente. O processo principal terminou. Aparece com status “Exited” no docker ps -a.

    restarting: O Docker está tentando reiniciar o container automaticamente, de acordo com a política de reinício definida (--restart). Isso acontece, por exemplo, se o processo travar ou for morto.

    created: O container foi criado, mas ainda não iniciado. Está aguardando execução. Pode acontecer após docker create ou antes do primeiro docker start.

    removing: O container está no processo de ser removido. Esse estado normalmente é muito breve.

    dead: Estado raro e indesejado. Indica que houve uma falha grave e o Docker não conseguiu limpar adequadamente os recursos do container. Pode ser necessário reiniciar o serviço Docker para resolver.

 As alterações feitas dentro de um container em execução (como instalar pacotes, criar arquivos, mudar configurações) só existem enquanto o container está ativo.

 Se você parar e deletar o container, essas mudanças se perdem. Para torná-las permanentes, você tem 3 opções principais:

    1 - Criar uma nova imagem com docker commit: Se você personalizou um container e quer “salvar” ele como está. Sempre que um commit for feito, estaremos salvando o estado atual do container na imagem utilizada.

        docker commit <nome_ou_id_do_container> meu-container-customizado

        docker commit ubuntu-container ubuntu-custom:v1

        Depois, você pode rodar novos containers a partir dessa nova imagem:

            docker run -it ubuntu-custom:v1

        Verifique com o comando docker images que você possui uma nova imagem.

    2 - Usar um Dockerfile e criar uma imagem com docker build: Essa é a forma mais profissional e reprodutível de manter alterações. Você cria um Dockerfile com todos os comandos que fariam as alterações:

        FROM ubuntu

        RUN apt update && apt install -y curl vim

        COPY meu_script.sh /usr/local/bin/

        CMD ["/bin/bash"]

        E então cria a imagem com:

            docker build -t minha-imagem-personalizada .

        Agora você tem uma imagem que sempre será construída igual.

    3 - Usar volumes para persistir dados (quando se trata de arquivos): Se o que você precisa é salvar arquivos, logs, bancos de dados, etc., o ideal é montar volumes:

        docker run -it -v /caminho/host:/caminho/container ubuntu

        Assim, os dados salvos no container não se perdem mesmo que ele seja destruído.

 Dica: Verifique suas mudanças com docker diff, se quiser saber o que mudou em um container em execução antes de salvar:

    docker diff [nome ou ID do container]

 Comandos para gerenciar containers:

    Criar e iniciar um container a partir de uma imagem:

        docker run ubuntu                  # Imagens oficiais

        docker run usuario/custom-app      # Imagens comunitárias

        Quando você roda docker run, o Docker:

            Verifica/puxa a imagem: O Docker primeiro verifica se a imagem nginx já existe no cache local. Se sim, ele a usa direto. Se não, ele vai buscar no Docker Hub (ou outro registry configurado).

            Cria um container (estrutura + filesystem): O Docker cria uma nova estrutura de container com base na imagem:

                Aloca um container ID único; e
                Cria um sistema de camadas de leitura e escrita (Copy-on-Write):

                    A imagem original é somente leitura;
                    O container adiciona uma camada de escrita por cima.

                Isso garante que múltiplos containers possam usar a mesma imagem sem conflitos.

                    As camadas da imagem + camada de escrita;
                    Volumes (se definidos);
                    Diretórios temporários; e
                    Bind mounts (se definidos).

            Configura o ambiente (FS, rede, variáveis, etc.):

                O Docker configura o ambiente do container conforme os parâmetros do comando docker run:

                    Variáveis de ambiente (-e);
                    Diretórios montados (-v);
                    Limites de recursos (--memory, --cpus); e
                    Hostname, nome do container, etc.

                    Atribui um IP virtual para o container;
                    Configura NAT, DNS interno, roteamento; e
                    Cria regras de iptables para isolar e permitir tráfego.

                    Outras opções: host, none, ou redes personalizadas (docker network create)

            Executa o processo principal: O Docker executa o comando de entrada da imagem (definido no CMD ou ENTRYPOINT).

            Monitora o container enquanto ele estiver vivo: O Docker passa a monitorar o processo principal (PID 1 no container):

                Se esse processo morrer, o container termina
                Você pode ver logs, status, etc.
    
    Listar containers em execução:

        docker ps

    Listar containers em execução e parados:

        docker ps -a

    Parar um container em execução (demora alguns segundos para desligar, sem a opção -t):

        docker stop [nome ou ID do container]

    Iniciar um container parado:

        docker start [nome ou nome ou ID do container - visualizado com ps -a]

    Reiniciar um container:

        docker restart [nome ou ID do container]

    Executar um comando dentro de um container em execução:

        docker exec -it [nome ou ID do container] bash

    Conecta seu terminal à saída de um container em execução:

        docker attach [nome ou ID do container]

    Mostrar os logs de um container:

      docker logs [nome ou ID do container]

    Mostrar detalhes técnicos (JSON) de um container ou imagem:

        docker inspect [nome ou ID do container]   # Mostra exatamente como o Docker está estruturando o ambiente que será entregue ao runc.

    Mostrar os processos rodando dentro de um container:

        docker top [nome ou ID do container]

    Mostrar o uso de recursos (CPU, memória, rede) em tempo real dos containers:

        docker stats [nome ou ID do container]

    Remover um container:

        docker rm [ID ou nome do container]

    Remover todos os containers parados do sistema, de uma vez só:

        docker container prune

    Limpar os containers parados, redes não usadas e imagens órfãs, de uma vez só:

        docker system prune

    Atalhos para sair do container:

        Encerrar o shell (e o container): exit
        Sair sem encerrar (background): Ctrl + P seguido de Ctrl + Q

--------------------------------------------------------------------------------
Volumes:

 Containers são efêmeros, voláteis. Se você rodar docker rm, o container e tudo dentro dele somem. Mas às vezes você precisa que os dados persistam:

    Arquivos de configuração

    Bancos de dados (como o PostgreSQL ou MySQL)

    Logs de aplicação

 É aí que os volumes entram!

 Volumes são uma forma de armazenar dados persistentes fora do sistema de arquivos interno de um container. Eles são criados e gerenciados pelo Docker, e servem para:

    Manter dados entre reinicializações ou recriações de containers

    Compartilhar arquivos entre vários containers

    Evitar que dados importantes sejam apagados ao remover o container

 Tipos de volumes:

    Volumes gerenciados pelo Docker (recomendado):

        docker volume create meu_volume
        docker run -v meu_volume:/app/dados minha_imagem

    Bind mounts (liga uma pasta do host no container):

        docker run -v /caminho/no/host:/app/dados minha_imagem

    Volumes anônimos (usados quando você só faz -v /app/dados):

        docker run -v /app/dados minha_imagem

 Internamente, volumes vivem numa pasta como: /var/lib/docker/volumes/, mas você não precisa gerenciar isso manualmente. O Docker cuida de tudo!

 Comandos para gerenciar volumes:

    Listar os volumes:

        docker volume ls

    Criar um volume:

        docker volume create dados

    Detalhar um volume:

        docker volume inspect dados

    Remover um volume:

        docker volume rm [nome do volume]

    Remover todos os volumes não utilizados, de uma vez só:

        docker volume prune

    Copiar arquivos entre o host e um container:

        docker cp meu_container:/arquivo.txt ./

--------------------------------------------------------------------------------
Rede:

 Quando você cria contêineres sem especificar uma rede, o Docker automaticamente os coloca na rede padrão chamada bridge, que é uma rede interna isolada do host.

 Cada contêiner nessa rede recebe um IP interno (geralmente na faixa 172.17.0.0/16). Os contêineres podem acessar a internet, mas não são acessíveis diretamente de fora (a menos que você mapeie portas).
 
 Os contêineres não se enxergam pelo nome nessa rede padrão. Só por IP.

 O Docker oferece alguns drivers de rede padrão:

    bridge	    Padrão para contêineres locais. Usado quando você não especifica uma rede.
    host	    Usa a rede do host diretamente, sem isolamento.
    none	    Sem rede. Contêiner completamente isolado.
    overlay	    Usado com Docker Swarm para conectar contêineres em hosts diferentes.
    macvlan	    Dá um endereço IP diretamente da rede física ao contêiner.

 Conceitos Básicos:

    Container isolado: Cada contêiner tem sua pilha de rede.

    Comunicação entre contêineres: Normalmente, você cria uma rede bridge personalizada.

    Exposição de portas: Usado para acesso externo (-p ou --publish).

 Comandos para gerenciar as redes:

    Lista as redes disponíveis.

        docker network ls

    Criar uma rede customizada:

        docker network create minha-rede

    Mostrar detalhes de uma rede:

        docker network inspect bridge

    Mostra quais portas do container estão ligadas a quais portas do host?

        docker port [nome ou ID do container]

    Iniciar contêineres na mesma rede:

        docker run -dit --name web --network minha-rede nginx
        docker run -dit --name app --network minha-rede alpine

        Agora o contêiner app pode acessar web usando o nome web como hostname:

        docker exec -it app bash   # Executa o ping para web usando o nome, não o ip

    Conectar e desconectar redes:

        Conectar:

            docker network connect minha-rede [nome ou ID do container]

        Desconectar:

            docker network disconnect minha-rede [nome ou ID do container]

    Remover rede:

        docker network rm minha-rede   # Obs: só pode remover redes que não estão em uso.























--------------------------------------------------------------------------------
Outros comandos e opções úteis

 Todos os comandos docker possuem algumas opções úteis. Para coletar informações sobre as opções dos comandos, você pode utilizar --help:

    docker run --help

        Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

        Create and run a new container from an image

        Aliases:
        docker container run, docker run

        Options:
        --add-host list                     Add a custom host-to-IP mapping (host:ip)

        ...

 docker system df: Mostra uso de espaço em disco

        docker system df

 docker run:

    docker run -it [imagem]: Crie e inicie um container interativo com terminal. "Entre" no container e interaja com ele como se fosse uma máquina Linux normal.

        -i → Interativo: Mantém o STDIN (entrada padrão) aberto, mesmo que você não esteja interagindo com ele no momento. Ou seja, permite que você digite comandos dentro do container.

        -t → Terminal (pseudo-TTY): Aloca um terminal virtual para o container. Isso simula um terminal real, com formatação e controle de cursor — necessário para ferramentas como bash, sh, top, etc.

    docker run -dP [container]: Execute um container em segundo plano (modo daemon) e publique suas portas automaticamente.

        -d (detached): executa o container em segundo plano, sem prender o terminal.

        -P (publish all exposed ports): mapeia automaticamente todas as portas expostas pela imagem para portas aleatórias do host.

    docker run -dp [porta host]:[porta container] [container]: Execute um container em segundo plano (modo daemon) e publique as portas que foram definidas.

        docker run -dp 8080:80 nginx   # Mapeia a porta 80 do container (onde o Nginx escuta) para a porta 8080 do host. Agora você pode acessar o Nginx via http://localhost:8080

        -d (detached): executa o container em segundo plano, sem prender o terminal.

        -p (publish): mapeia uma porta do container para uma porta específica do host.

    docker run -dP --name meu-container [container]: Nomeia o container para não depender de IDs ou de nomes aleatórios.

    sudo docker run -itv "/home/pitter/Documentos/teste-dockerrr:/var/www" --name Ubuntu ubuntu: Cria um volume de conteúdo para o container. Quando se escrever no diretório /var/www do container, o documento será salvo em /home/pitter/Documentos/teste-dockerrr.

    sudo docker run ubuntu /bin/echo "Hello, Docker!": Esse comando executa um container só para rodar um comando simples e depois termina.

        /bin/echo "Hello, Docker!": É o comando que será executado dentro do container. O container vai rodar o programa echo para exibir a mensagem "Hello, Docker!".

 docker start:

    docker start -ai [nome ou ID do container]: Iniciar o container e utilizar o terminal.

        -i → Interativo: Mantém o STDIN (entrada padrão) aberto, mesmo que você não esteja interagindo com ele no momento. Ou seja, permite que você digite comandos dentro do container.

 docker stop:

    docker stop -t 0 [nome ou ID do container]: Acelera o processo de parada

    docker stop -t 0 $(docker ps -q): Para todos os IDs de container que o comando docker ps -q (a opção -q faz só retornar os IDs dos containers) retornar.

 docker ps:

    docker ps -a --format "table {{.Names}}\t{{.Status}}": Visualizar os containers com nomes e status legíveis.

 docker run -v "/home/pitter/Documentos:/var/www" -w "/var/www" node npm start 

 docker network create --driver bridge minha-rede: Cria uma rede com o driver bridge

 sudo docker run -it --name "ubuntu-na-nova-rede" --network "minha-rede" ubuntu: Cria um ubuntu e o coloca na rede (já criada) minha-rede
























































































