--------------------------------------------------------------------------------
 Docker:
--------------------------------------------------------------------------------

O Docker é uma plataforma que permite criar, empacotar e executar aplicações em contêineres.

Um contêiner é como uma caixinha leve e isolada que carrega tudo que uma aplicação precisa para rodar (código, bibliotecas, dependências, etc.).

Ele garante que a aplicação funcione da mesma forma em qualquer lugar: no seu computador, no servidor da empresa ou na nuvem.

Vantagens principais:

    Portabilidade: roda em qualquer sistema que tenha Docker.
    Leveza: contêineres são mais rápidos e consomem menos recursos que máquinas virtuais.
    Isolamento: cada contêiner funciona de forma independente.

Instale o Docker com as informações contidas no site:

    https://www.docker.com/get-started/
    https://docs.docker.com/desktop/

Para testar se o Docker está funcionando, execute os comandos:

    sudo docker version

        Client: Docker Engine - Community
        Version:           28.0.4
        API version:       1.48
        Go version:        go1.23.7
        Git commit:        b8034c0
        Built:             Tue Mar 25 15:07:22 2025
        OS/Arch:           linux/amd64
        Context:           default

        Server: Docker Engine - Community
        Engine:
        Version:          28.0.4
        API version:      1.48 (minimum version 1.24)
        Go version:       go1.23.7
        Git commit:       6430e49
        Built:            Tue Mar 25 15:07:22 2025
        OS/Arch:          linux/amd64
        Experimental:     false
        containerd:
        Version:          1.7.27
        GitCommit:        05044ec0a9a75232cad458027ca83437aae3f4da
        runc:
        Version:          1.2.5
        GitCommit:        v1.2.5-0-g59923ef
        docker-init:
        Version:          0.19.0
        GitCommit:        de40ad0

    sudo docker run hello-world

        Hello from Docker!
        This message shows that your installation appears to be working correctly.

        To generate this message, Docker took the following steps:
        1. The Docker client contacted the Docker daemon.
        2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
            (amd64)
        3. The Docker daemon created a new container from that image which runs the
            executable that produces the output you are currently reading.
        4. The Docker daemon streamed that output to the Docker client, which sent it
            to your terminal.

        To try something more ambitious, you can run an Ubuntu container with:
        $ docker run -it ubuntu bash

        Share images, automate workflows, and more with a free Docker ID:
        https://hub.docker.com/

        For more examples and ideas, visit:
        https://docs.docker.com/get-started/

--------------------------------------------------------------------------------
 Imagem e container:
--------------------------------------------------------------------------------

 Uma imagem Docker é como um molde ou modelo pronto que contém tudo o que você precisa para executar uma aplicação:

    O código da aplicação;
    Bibliotecas necessárias;
    Dependências do sistema;
    Variáveis de ambiente; e
    Comandos de inicialização.

 Ela é imutável — uma vez criada, não muda. Você pode pensar nela como o “ISO” de um sistema, só que mais leve e feito para rodar rapidamente em containers.

 Exemplo:

    Uma imagem do nginx já vem com o servidor web instalado e configurado para começar a rodar logo que o container for iniciado.

 Um container Docker é uma instância viva e em execução de uma imagem. É como se você pegasse a imagem (molde) e executasse uma cópia funcional dela.

O container:

    Roda isolado do host (mas pode se comunicar com ele);
    É leve e inicia rápido;
    Pode ser parado, reiniciado, ou descartado facilmente; e
    Pode ter dados persistentes, se configurado com volumes.

 Se a imagem é a receita do bolo, o container é o bolo assando no forno.

 Você pode ter vários containers rodando a partir da mesma imagem.

 Exemplo:

    docker run -d nginx
    docker run -d nginx

 Duas instâncias do servidor nginx rodando, ambas baseadas na mesma imagem nginx.

--------------------------------------------------------------------------------
 Estados de um container:
--------------------------------------------------------------------------------

 Os containers Docker podem assumir diferentes estados ao longo de seu ciclo de vida. Conhecer esses estados ajuda bastante no monitoramento e na automação. Aqui estão os principais:

    running: O container está em execução. Seu processo principal (PID 1) está ativo. Aparece com status “Up” no docker ps.

    paused: O container está temporariamente suspenso. Todos os processos dentro dele são congelados. Pode ser retomado com docker unpause.

    stopped / exited: O container foi encerrado, voluntária ou involuntariamente. O processo principal terminou. Aparece com status “Exited” no docker ps -a.

    restarting: O Docker está tentando reiniciar o container automaticamente, de acordo com a política de reinício definida (--restart). Isso acontece, por exemplo, se o processo travar ou for morto.

    created: O container foi criado, mas ainda não iniciado. Está aguardando execução. Pode acontecer após docker create ou antes do primeiro docker start.

    removing: O container está no processo de ser removido. Esse estado normalmente é muito breve.

    dead: Estado raro e indesejado. Indica que houve uma falha grave e o Docker não conseguiu limpar adequadamente os recursos do container. Pode ser necessário reiniciar o serviço Docker para resolver.

--------------------------------------------------------------------------------
 Comandos:
--------------------------------------------------------------------------------

 Todos os comandos docker possuem algumas opções úteis. Para coletar informações sobre as opções dos comandos, você pode utilizar --help:

    docker run --help

        Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

        Create and run a new container from an image

        Aliases:
        docker container run, docker run

        Options:
        --add-host list                     Add a custom host-to-IP mapping (host:ip)

        ...

 Comandos para rodar e criar containers:

    docker run: Cria e inicia um container a partir de uma imagem.

        docker run [nome da imagem]
        docker run [username/nome da imagem]

        Quando você roda docker run, o Docker:

            Verifica/puxa a imagem: O Docker primeiro verifica se a imagem nginx já existe no cache local. Se sim, ele a usa direto. Se não, ele vai buscar no Docker Hub (ou outro registry configurado).

            Cria um container (estrutura + filesystem): O Docker cria uma nova estrutura de container com base na imagem:

                Aloca um container ID único; e
                Cria um sistema de camadas de leitura e escrita (Copy-on-Write):

                    A imagem original é somente leitura;
                    O container adiciona uma camada de escrita por cima.

                Isso garante que múltiplos containers possam usar a mesma imagem sem conflitos.

                    As camadas da imagem + camada de escrita;
                    Volumes (se definidos);
                    Diretórios temporários; e
                    Bind mounts (se definidos).

            Configura o ambiente (FS, rede, variáveis, etc.):

                O Docker configura o ambiente do container conforme os parâmetros do comando docker run:

                    Variáveis de ambiente (-e);
                    Diretórios montados (-v);
                    Limites de recursos (--memory, --cpus); e
                    Hostname, nome do container, etc.

                    Atribui um IP virtual para o container;
                    Configura NAT, DNS interno, roteamento; e
                    Cria regras de iptables para isolar e permitir tráfego.

                    Outras opções: host, none, ou redes personalizadas (docker network create)

            Executa o processo principal: O Docker executa o comando de entrada da imagem (definido no CMD ou ENTRYPOINT).

            Monitora o container enquanto ele estiver vivo: O Docker passa a monitorar o processo principal (PID 1 no container):

                Se esse processo morrer, o container termina
                Você pode ver logs, status, etc.

        Utilize as opções -it para que você "entre" no container e interaja com ele como se fosse uma máquina Linux normal.

            docker run -it [imagem]

                -i → Interativo: Mantém o STDIN (entrada padrão) aberto, mesmo que você não esteja interagindo com ele no momento. Ou seja, permite que você digite comandos dentro do container.

                -t → Terminal (pseudo-TTY): Aloca um terminal virtual para o container. Isso simula um terminal real, com formatação e controle de cursor — necessário para ferramentas como bash, sh, top, etc.

        Utilize as opções -dP para criar um 

    docker start: Inicia um container parado.

        docker start [nome ou nome ou ID do container - visualizado com ps -a]

        Utilize as opções -ai para voltar a utilizar o terminal do container.

            docker start -ai [nome ou ID do container]

    docker stop: Para um container em execução. Por padrão, demora alguns segundos para desligar.

        docker stop [nome ou ID do container]

        Para acelerar o processo de parada, utilize a opção -t:

            docker stop -t 0 [nome ou ID do container]

    docker restart:	Reinicia um container.

        docker restart [nome ou ID do container]

    docker exec: Executa um comando dentro de um container em execução.

        docker exec -it [nome ou ID do container] bash

    docker attach: Conecta seu terminal à saída de um container em execução.

 Comandos para gerenciar imagens

    docker pull: Baixa uma imagem do Docker Hub (ou outro registry).

        docker pull ubuntu

    docker push: Envia imagem para um repositório remoto.

        docker push meu-registro/nginx:prod

    docker build: Cria uma imagem a partir de um Dockerfile.

        docker build -t minha_imagem .

    docker images: Lista todas as imagens disponíveis localmente.

        docker images

    docker rmi: Remove uma imagem.

        docker rmi [nome ou ID da imagem]

    docker history: Mostra as camadas de uma imagem.

        docker history ubuntu

    docker tag: Cria uma tag (apelido) para uma imagem.

        docker tag nginx meu-registro/nginx:prod

 Comandos para monitoramento e inspeção

    docker ps: Lista containers em execução.

        Use a opção -a para ver todos, inclusive os parados.

        Para visualizar os containers com nomes e status legíveis, faça o comando:

            docker ps -a --format "table {{.Names}}\t{{.Status}}"

    docker logs: Mostra os logs de um container.

        docker logs meu_container

    docker inspect: Mostra detalhes técnicos (JSON) de um container ou imagem.

    docker top: Mostra os processos rodando dentro de um container.

        docker top [nome ou ID do container]

    docker stats: Mostra uso de recursos (CPU, memória, rede) em tempo real dos containers.

 Comandos para limpeza e manutenção

    docker rm: Remove um container.

        docker rm [ID ou nome do container]

    docker container prune: Remove todos os containers parados do sistema, de uma vez só.

        docker container prune

    docker system prune: Limpa os containers parados, redes não usadas e imagens órfãs, de uma vez só.

        docker system prune

    docker volume prune: Remove todos os volumes não utilizados, de uma vez só.

        docker volume prune

    docker image prune: Remove todas as imagens que não estão sendo usadas por nenhum container, de uma vez só.

        docker image prune

 Redes e Volumes

    docker network ls: Lista redes Docker disponíveis.

    docker network create: Cria uma rede customizada.

        docker network create minha-rede

    docker network inspect: Mostra detalhes de uma rede.

        docker network inspect bridge

    docker volume ls: Lista volumes Docker.

    docker volume create: Cria um volume.

        docker volume create dados

    docker volume inspect: Detalha um volume

        docker volume inspect dados

 Outros úteis

    docker cp: Copia arquivos entre o host e um container.

        docker cp meu_container:/arquivo.txt ./

    docker login: Autentica em um registry (ex: Docker Hub).

    docker push: Envia uma imagem para um registry remoto.

    docker system df: Mostra uso de espaço em disco

        docker system df



































































































